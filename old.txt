#include <thread>
int test_threading()
{
	unsigned amount = 8000;
	auto start = std::chrono::steady_clock::now();
	for (unsigned i = 0; i < amount; i++)
	{
		volatile unsigned j = i;
		if (j > 0 && j <= 250) j = 100;
		if (j > 250 && j <= 500) j = 200;
		if (j > 500 && j <= 750) j = 300;
		if (j > 750 && j <= 1000) j = 400;
	}
	double duration = std::chrono::duration_cast<std::chrono::duration<double>>(std::chrono::steady_clock::now() - start).count();
	printf("Usual %f", duration);
	start = std::chrono::steady_clock::now();
	std::thread thrd([&]() {
		for (unsigned i = 0; i < amount; i++)
		{
			volatile unsigned j = i;
			if (j > 0 && j <= 250) j = 100;
			if (j > 250 && j <= 500) j = 200;
			if (j > 500 && j <= 750) j = 300;
			if (j > 750 && j <= 1000) j = 400;
		}
		});
	thrd.join();
	duration = std::chrono::duration_cast<std::chrono::duration<double>>(std::chrono::steady_clock::now() - start).count();
	printf("Threaded %f", duration);
	return 0;
}


{
Engine Col3(800, 600);
	Col3.audio();
	Renderer collage = Col3.renderer();
	Input collector = Col3.input();
	Physics* collision = Col3.physics();

	Drawable test;

	Camera cam(800, 600);

	DynamicLayer layer;

	Drawable obj{ "rescources/clckhnd.png" };
	obj.scale(100.0);
	layer.add(obj);

	Drawable obj2{ "rescources/clckhnd.png" };
	obj2.scale(50.0);
	layer.add(obj2);

	Test t1(-100, 0);
	layer.add(t1);
	collector.make_entry(t1);
	Timer::make_entry(t1);
	collision->make_entry(t1);

	Test t2(100, 0);
	layer.add(t2);
	collision->make_entry(t2);

	Col3.start();
	double avg = 0.0, amt = 0.0;
	while (!Col3.done()) {
		collage.clear_color();
		layer.draw();
		collage.swap_buffer();
		collision->calculate();
		float elapsed = Col3.clock();
		obj.rotate(7 * -elapsed);
		obj2.rotate(-elapsed);
		avg += elapsed;
		amt += 1;
	}
}

	void rebind(int glfw_keycode_from, int glfw_keycode_to)
	{
		int kc = glfwGetKeyScancode(glfw_keycode_from);
		for (int i = 0; i < keys.size(); i++)
		{
			if (keys[i] == kc)
			{
				if (arr_controlled[keys[i] - offset] == this)
				{
					arr_controlled[keys[i] - offset] = nullptr;
				}
				keys[i] = glfwGetKeyScancode(glfw_keycode_to);
				arr_controlled[keys[i] - offset] = this;
				return;
			}
		}
	}

	class TestVao
{
public:
	TestVao()
	{
		GLC(glGenBuffers(1, &vbo));
		GLC(glGenVertexArrays(1, &vao));

		GLC(glBindVertexArray(vao));
		GLC(glBindBuffer(GL_ARRAY_BUFFER, vbo));
		GLC(glBufferData(GL_ARRAY_BUFFER, 3 * sizeof(vert), &vert, GL_STATIC_DRAW));

		GLC(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(vertex), 0));
		GLC(glEnableVertexAttribArray(0));

		GLC(glVertexAttribPointer(1, 1, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)offsetof(vertex, rot)));
		GLC(glEnableVertexAttribArray(1));

		GLC(glVertexAttribPointer(2, 1, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)offsetof(vertex, op)));
		GLC(glEnableVertexAttribArray(2));

		GLC(glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)offsetof(vertex, scl)));
		GLC(glEnableVertexAttribArray(3));

		GLC(glVertexAttribPointer(4, 1, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)offsetof(vertex, rat)));
		GLC(glEnableVertexAttribArray(4));

		GLC(glVertexAttribPointer(5, 1, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)offsetof(vertex, txid)));
		GLC(glEnableVertexAttribArray(5));

		GLC(glBindBuffer(GL_ARRAY_BUFFER, 0));
		GLC(glBindVertexArray(0));
	}
	void bind() const
	{
		GLC(glBindVertexArray(vao));
		tex[0].use(0);
		tex[1].use(1);
		tex[2].use(2);
	}
	vertex vert[3] = { 
				{ 100,   100, 45.0, 0.5, 20.0, 1.0, 0 },
				{ 100,  -100, -80.0, 1.0, 20.0, 1.5, 1 },
				{ -100,  100, 30.0, 0.7, 20.0, 0.8, 2 },
			};
	Texture tex[3] = {
		Texture("rescources/test.png"),
		Texture("rescources/Test1.png"),
		Texture("rescources/teapot.png")
	};
	unsigned vao, vbo;
};